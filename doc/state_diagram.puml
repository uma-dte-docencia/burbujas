@startuml state_diagram

title Diagrama de Estados - Ciclo de Vida de una Partícula

[*] --> Inicializando : new Particula(PVector donde)

state Inicializando {
  Inicializando : entry / posicion = donde.copy()
  Inicializando : entry / velocidad = random(2,4), random(-1,1)
  Inicializando : entry / aceleracion = (0,0)
  Inicializando : entry / tamanio = random(20,35)
  Inicializando : entry / isDead = false
}

Inicializando --> Viva : inicialización completa

state Viva {
  Viva : do / update() y render()
  Viva : aplicarViscosidad(v) / calcular resistencia y aplicar fuerza
  
  state "Ejecutar update()" as update_activity {
    update_activity : velocidad.add(aceleracion)
    update_activity : posicion.add(velocidad)
    update_activity : tamanio += 0.1
    update_activity : verificar condiciones de muerte
  }
  
  state "Ejecutar render()" as render_activity {
    render_activity : fill(255, 128)
    render_activity : ellipse(posicion.x, posicion.y, tamanio, tamanio)
  }

  state decision_muerte <<choice>>
  
  [*] --> update_activity
  update_activity --> decision_muerte
  decision_muerte --> render_activity : [velocidad.mag() >= 0.01] AND [random(0,1000) <= 995]
  decision_muerte --> Muerta : [else] / isDead = true
  render_activity --> [*]
}

state Muerta {
  Muerta : entry / isDead = true
  Muerta : do / no se ejecuta update()
  Muerta : do / no se ejecuta render()
  Muerta : exit / eliminada del ArrayList
}

Muerta --> [*] : eliminada por SistemaParticulas.run()

note left of Muerta
  Condiciones de muerte:
  1. Velocidad muy baja (< 0.01)
  2. Probabilidad aleatoria (0.5%)
end note

@enduml